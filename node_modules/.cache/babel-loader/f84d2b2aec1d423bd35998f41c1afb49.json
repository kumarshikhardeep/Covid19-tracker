{"ast":null,"code":"var _jsxFileName = \"/home/shikhar/inshort/COVID-19-Details/src/components/CountryPicker/CountryPicker.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl, Container } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { getCovidData } from '../../api';\nimport Accordion from '../Accordion/Accordion';\nimport Select from '../AutoComplete/AutoComplete';\nimport { TempleBuddhistOutlined } from '@mui/icons-material';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Chart from '../Chart/Chart';\nimport Cards from '../Cards/Cards';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TableHead from '@mui/material/TableHead';\nimport Loader from '../Loader/Loader';\nconst useStyles = makeStyles({\n  table: {\n    width: 650\n  }\n});\n\nconst CountryPicker = ({\n  data\n}) => {\n  // const [stateMap, setStateMap] = useState({});\n  // const [isLoading, setIsLoading] = useState(true);\n  // const [global, setGlobal] = useState();\n  // const [states, setStates] = useState([]);\n  // const [selectedSno, setSelectedSno] = useState();\n  // const [selectedState, setSelectedState] = useState();\n  // const [confirmed, setConfirmed] = useState(0);\n  // const [recovered, setRecovered] = useState(0);\n  // const [death, setDeath] = useState(0);\n  const classes = useStyles(); // console.log(\"AAAAAAA\", data)\n  // useEffect(() => {\n  //     const getStateData = async () => {\n  //         let data;\n  //         await getCovidData()\n  //             .then(val => {\n  //                 data = val;\n  //             });\n  //         let tempMap = {}\n  //         let tempStates = []\n  //         data.forEach(state => {\n  //             if (!tempMap[state.sno]) {\n  //                 tempMap[state.sno] = state\n  //                 if (!state.state_name) {\n  //                     state.state_name = \"India\"\n  //                     setGlobal(state);\n  //                 }\n  //                 if (state.state_name)\n  //                     tempStates.push({ label: state.state_name, sno: state.sno });\n  //             }\n  //         })\n  //         setStateMap(tempMap);\n  //         setStates(tempStates);\n  //         setIsLoading(false);\n  //     }\n  //     getStateData();\n  // }, [])\n  // useEffect(() => {\n  //     if (selectedSno) {\n  //         setConfirmed(stateMap[selectedSno].new_positive)\n  //         setRecovered(stateMap[selectedSno].new_cured)\n  //         setDeath(stateMap[selectedSno].new_death)\n  //         setSelectedState(stateMap[selectedSno].state_name)\n  //     }\n  // }, [selectedSno])\n  // useEffect(() => {\n  //     if (!isLoading && states[\"37\"]) {\n  //         setGlobal(states[\"37\"])\n  //     }\n  // }, [isLoading, states])\n  // const handleChange = (event, value) => {\n  //     setSelectedSno(value.sno)\n  // }\n\n  return (\n    /*#__PURE__*/\n    // isLoading ? <Loader open={isLoading} /> :\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      data: {\n        confirmed: data === null || data === void 0 ? void 0 : data.new_positive,\n        recovered: data === null || data === void 0 ? void 0 : data.new_cured,\n        deaths: data === null || data === void 0 ? void 0 : data.new_death\n      },\n      country: data === null || data === void 0 ? void 0 : data.state_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }, \"Cases since yesterday\"), /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, \"Count\")), /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 41\n      }\n    }, \"Active Cases since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 41\n      }\n    }, (data === null || data === void 0 ? void 0 : data.new_positive) - (data === null || data === void 0 ? void 0 : data.positive))), /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 41\n      }\n    }, \"Cured since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 41\n      }\n    }, (data === null || data === void 0 ? void 0 : data.new_cured) - (data === null || data === void 0 ? void 0 : data.cured))), /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      variant: \"head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 41\n      }\n    }, \"Deaths since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 41\n      }\n    }, (data === null || data === void 0 ? void 0 : data.new_death) - (data === null || data === void 0 ? void 0 : data.death))))))))))\n  );\n};\n\nexport default CountryPicker;","map":{"version":3,"sources":["/home/shikhar/inshort/COVID-19-Details/src/components/CountryPicker/CountryPicker.jsx"],"names":["React","useState","useEffect","NativeSelect","FormControl","Container","styles","getCovidData","Accordion","Select","TempleBuddhistOutlined","Grid","Paper","DataGrid","Box","Chart","Cards","Card","CardContent","Typography","Table","TableCell","TableRow","makeStyles","TableHead","Loader","useStyles","table","width","CountryPicker","data","classes","confirmed","new_positive","recovered","new_cured","deaths","new_death","state_name","positive","cured","death"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl, Container } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { getCovidData } from '../../api';\nimport Accordion from '../Accordion/Accordion'\nimport Select from '../AutoComplete/AutoComplete'\nimport { TempleBuddhistOutlined } from '@mui/icons-material';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Chart from '../Chart/Chart'\nimport Cards from '../Cards/Cards'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TableHead from '@mui/material/TableHead';\nimport Loader from '../Loader/Loader';\n\nconst useStyles = makeStyles({\n    table: {\n        width: 650,\n    },\n});\n\nconst CountryPicker = ({ data }) => {\n    // const [stateMap, setStateMap] = useState({});\n    // const [isLoading, setIsLoading] = useState(true);\n    // const [global, setGlobal] = useState();\n    // const [states, setStates] = useState([]);\n    // const [selectedSno, setSelectedSno] = useState();\n    // const [selectedState, setSelectedState] = useState();\n    // const [confirmed, setConfirmed] = useState(0);\n    // const [recovered, setRecovered] = useState(0);\n    // const [death, setDeath] = useState(0);\n    const classes = useStyles();\n\n    // console.log(\"AAAAAAA\", data)\n\n\n    // useEffect(() => {\n    //     const getStateData = async () => {\n    //         let data;\n    //         await getCovidData()\n    //             .then(val => {\n    //                 data = val;\n    //             });\n    //         let tempMap = {}\n    //         let tempStates = []\n    //         data.forEach(state => {\n    //             if (!tempMap[state.sno]) {\n    //                 tempMap[state.sno] = state\n    //                 if (!state.state_name) {\n    //                     state.state_name = \"India\"\n    //                     setGlobal(state);\n    //                 }\n    //                 if (state.state_name)\n    //                     tempStates.push({ label: state.state_name, sno: state.sno });\n    //             }\n    //         })\n    //         setStateMap(tempMap);\n    //         setStates(tempStates);\n    //         setIsLoading(false);\n\n    //     }\n    //     getStateData();\n    // }, [])\n\n    // useEffect(() => {\n    //     if (selectedSno) {\n    //         setConfirmed(stateMap[selectedSno].new_positive)\n    //         setRecovered(stateMap[selectedSno].new_cured)\n    //         setDeath(stateMap[selectedSno].new_death)\n    //         setSelectedState(stateMap[selectedSno].state_name)\n    //     }\n    // }, [selectedSno])\n\n    // useEffect(() => {\n    //     if (!isLoading && states[\"37\"]) {\n    //         setGlobal(states[\"37\"])\n    //     }\n    // }, [isLoading, states])\n\n\n    // const handleChange = (event, value) => {\n    //     setSelectedSno(value.sno)\n    // }\n\n\n    return (\n        // isLoading ? <Loader open={isLoading} /> :\n        <>\n            {/* <Cards data={{ confirmed: confirmed, recovered: recovered, deaths: death }} /> */}\n            {/* <Select data={states} onChange={handleChange} /> */}\n\n            <Container>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <Chart data={{ confirmed: data?.new_positive, recovered: data?.new_cured, deaths: data?.new_death }} country={data?.state_name} />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div className=\"App\">\n                            <div className='table-container'>\n                                <Table className={classes.table} >\n                                    <TableRow >\n                                        <TableHead>Cases since yesterday</TableHead>\n                                        <TableHead>Count</TableHead>\n                                    </TableRow>\n                                    <TableRow >\n                                        <TableCell variant=\"head\">Active Cases since yesterday</TableCell>\n                                        <TableCell>{data?.new_positive - data?.positive}</TableCell>\n                                    </TableRow>\n                                    <TableRow>\n                                        <TableCell variant=\"head\">Cured since yesterday</TableCell>\n                                        <TableCell>{data?.new_cured - data?.cured}</TableCell>\n                                    </TableRow>\n                                    <TableRow >\n                                        <TableCell variant=\"head\">Deaths since yesterday</TableCell>\n                                        <TableCell>{data?.new_death - data?.death}</TableCell>\n                                    </TableRow>\n                                </Table>\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </Container>\n\n\n        </>\n\n    )\n\n\n}\n\nexport default CountryPicker;\n"]},"metadata":{},"sourceType":"module"}