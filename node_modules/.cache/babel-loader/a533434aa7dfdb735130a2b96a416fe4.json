{"ast":null,"code":"var _jsxFileName = \"/home/shikhar/inshort/COVID-19-Details/src/components/CountryPicker/CountryPicker.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl, Container } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { getCovidData } from '../../api';\nimport Accordion from '../Accordion/Accordion';\nimport Select from '../AutoComplete';\nimport { TempleBuddhistOutlined } from '@mui/icons-material';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Chart from '../Chart/Chart';\nimport Cards from '../Cards/Cards';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  table: {\n    width: 650\n  }\n});\n\nconst CountryPicker = ({\n  handleCountryChange\n}) => {\n  const [stateMap, setStateMap] = useState({});\n  const [states, setStates] = useState([]);\n  const [selectedSno, setSelectedSno] = useState();\n  const [selectedState, setSelectedState] = useState(\"India\");\n  const [confirmed, setConfirmed] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n  const [death, setDeath] = useState(0);\n  const classes = useStyles();\n  useEffect(() => {\n    const getStateData = async () => {\n      let data = await getCovidData();\n      let tempMap = {};\n      let tempStates = [{\n        label: \"India\",\n        sno: \"37\"\n      }];\n      data.forEach(state => {\n        if (!tempMap[state.sno]) {\n          tempMap[state.sno] = state;\n\n          if (!state.state_name) {\n            state.state_name = \"India\";\n          }\n\n          if (state.state_name) tempStates.push({\n            label: state.state_name,\n            sno: state.sno\n          });\n        }\n      });\n      setStateMap(tempMap);\n      setStates(tempStates);\n    };\n\n    getStateData();\n  }, []);\n  useEffect(() => {\n    if (selectedSno) {\n      setConfirmed(stateMap[selectedSno].new_positive);\n      setRecovered(stateMap[selectedSno].new_cured);\n      setDeath(stateMap[selectedSno].new_death);\n      setSelectedState(stateMap[selectedSno].state_name);\n    }\n  }, [selectedSno]);\n\n  const handleChange = (event, value) => {\n    setSelectedSno(value.sno);\n  };\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 90\n  }, {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 150,\n    editable: true\n  }, {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 150,\n    editable: true\n  }, {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 110,\n    editable: true\n  }, {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: params => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n  }];\n  const rows = [{\n    id: 1,\n    lastName: 'Snow',\n    firstName: 'Jon',\n    age: 35\n  }, {\n    id: 2,\n    lastName: 'Lannister',\n    firstName: 'Cersei',\n    age: 42\n  }, {\n    id: 3,\n    lastName: 'Lannister',\n    firstName: 'Jaime',\n    age: 45\n  }, {\n    id: 4,\n    lastName: 'Stark',\n    firstName: 'Arya',\n    age: 16\n  }, {\n    id: 5,\n    lastName: 'Targaryen',\n    firstName: 'Daenerys',\n    age: null\n  }, {\n    id: 6,\n    lastName: 'Melisandre',\n    firstName: null,\n    age: 150\n  }, {\n    id: 7,\n    lastName: 'Clifford',\n    firstName: 'Ferrara',\n    age: 44\n  }, {\n    id: 8,\n    lastName: 'Frances',\n    firstName: 'Rossini',\n    age: 36\n  }, {\n    id: 9,\n    lastName: 'Roxie',\n    firstName: 'Harvey',\n    age: 65\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Cards, {\n    data: {\n      confirmed: confirmed,\n      recovered: recovered,\n      deaths: death\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    data: states,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    sx: {\n      flexGrow: 1\n    },\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    data: {\n      confirmed: confirmed,\n      recovered: recovered,\n      deaths: death\n    },\n    country: selectedState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: \"row-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    variant: \"head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  }, \"Active Cases since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, stateMap[selectedSno].new_positive - stateMap[selectedSno].positive)), /*#__PURE__*/React.createElement(TableRow, {\n    className: \"row-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    variant: \"head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 41\n    }\n  }, \"Cured since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 41\n    }\n  }, \"Cell 1\")), /*#__PURE__*/React.createElement(TableRow, {\n    className: \"row-style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    variant: \"head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 41\n    }\n  }, \"Deaths since yesterday\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 41\n    }\n  }, \"Cell 1\"))))))))) // <FormControl className={styles.formControl}>\n  //     <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n  //         <option value=\"\">Global</option>\n  //         {stateData.map((state, id) => <option value={state.state_bane} key={id}>{state.state_name}</option>)}\n  //     </NativeSelect>\n  // </FormControl>\n  // <Accordion data={stateData} />\n  ;\n};\n\nexport default CountryPicker;","map":{"version":3,"sources":["/home/shikhar/inshort/COVID-19-Details/src/components/CountryPicker/CountryPicker.jsx"],"names":["React","useState","useEffect","NativeSelect","FormControl","Container","styles","getCovidData","Accordion","Select","TempleBuddhistOutlined","Grid","Paper","DataGrid","Box","Chart","Cards","Card","CardContent","Typography","Table","TableCell","TableRow","makeStyles","useStyles","table","width","CountryPicker","handleCountryChange","stateMap","setStateMap","states","setStates","selectedSno","setSelectedSno","selectedState","setSelectedState","confirmed","setConfirmed","recovered","setRecovered","death","setDeath","classes","getStateData","data","tempMap","tempStates","label","sno","forEach","state","state_name","push","new_positive","new_cured","new_death","handleChange","event","value","columns","field","headerName","editable","type","description","sortable","valueGetter","params","row","firstName","lastName","rows","id","age","deaths","flexGrow","positive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,SAApC,QAAqD,mBAArD;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,UAA5B,QAA8C,mBAA9C;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,MAAMC,SAAS,GAAGD,UAAU,CAAC;AACzBE,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE;AADJ;AADkB,CAAD,CAA5B;;AAMA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAC/C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC8B,MAAD,EAASC,SAAT,IAAsB/B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,EAA9C;AACA,QAAM,CAACkC,aAAD,EAAgBC,gBAAhB,IAAoCnC,QAAQ,CAAC,OAAD,CAAlD;AACA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACsC,SAAD,EAAYC,YAAZ,IAA4BvC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACwC,KAAD,EAAQC,QAAR,IAAoBzC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM0C,OAAO,GAAGnB,SAAS,EAAzB;AAGAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0C,YAAY,GAAG,YAAY;AAC7B,UAAIC,IAAI,GAAG,MAAMtC,YAAY,EAA7B;AACA,UAAIuC,OAAO,GAAG,EAAd;AACA,UAAIC,UAAU,GAAG,CAAC;AAAEC,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAD,CAAjB;AACAJ,MAAAA,IAAI,CAACK,OAAL,CAAaC,KAAK,IAAI;AAClB,YAAI,CAACL,OAAO,CAACK,KAAK,CAACF,GAAP,CAAZ,EAAyB;AACrBH,UAAAA,OAAO,CAACK,KAAK,CAACF,GAAP,CAAP,GAAqBE,KAArB;;AACA,cAAI,CAACA,KAAK,CAACC,UAAX,EAAuB;AACnBD,YAAAA,KAAK,CAACC,UAAN,GAAmB,OAAnB;AACH;;AACD,cAAID,KAAK,CAACC,UAAV,EACIL,UAAU,CAACM,IAAX,CAAgB;AAAEL,YAAAA,KAAK,EAAEG,KAAK,CAACC,UAAf;AAA2BH,YAAAA,GAAG,EAAEE,KAAK,CAACF;AAAtC,WAAhB;AACP;AACJ,OATD;AAUAnB,MAAAA,WAAW,CAACgB,OAAD,CAAX;AACAd,MAAAA,SAAS,CAACe,UAAD,CAAT;AACH,KAhBD;;AAiBAH,IAAAA,YAAY;AACf,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA1C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI+B,WAAJ,EAAiB;AACbK,MAAAA,YAAY,CAACT,QAAQ,CAACI,WAAD,CAAR,CAAsBqB,YAAvB,CAAZ;AACAd,MAAAA,YAAY,CAACX,QAAQ,CAACI,WAAD,CAAR,CAAsBsB,SAAvB,CAAZ;AACAb,MAAAA,QAAQ,CAACb,QAAQ,CAACI,WAAD,CAAR,CAAsBuB,SAAvB,CAAR;AACApB,MAAAA,gBAAgB,CAACP,QAAQ,CAACI,WAAD,CAAR,CAAsBmB,UAAvB,CAAhB;AACH;AACJ,GAPQ,EAON,CAACnB,WAAD,CAPM,CAAT;;AAUA,QAAMwB,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACnCzB,IAAAA,cAAc,CAACyB,KAAK,CAACV,GAAP,CAAd;AACH,GAFD;;AAIA,QAAMW,OAAO,GAAG,CACZ;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiCpC,IAAAA,KAAK,EAAE;AAAxC,GADY,EAEZ;AACImC,IAAAA,KAAK,EAAE,WADX;AAEIC,IAAAA,UAAU,EAAE,YAFhB;AAGIpC,IAAAA,KAAK,EAAE,GAHX;AAIIqC,IAAAA,QAAQ,EAAE;AAJd,GAFY,EAQZ;AACIF,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,UAAU,EAAE,WAFhB;AAGIpC,IAAAA,KAAK,EAAE,GAHX;AAIIqC,IAAAA,QAAQ,EAAE;AAJd,GARY,EAcZ;AACIF,IAAAA,KAAK,EAAE,KADX;AAEIC,IAAAA,UAAU,EAAE,KAFhB;AAGIE,IAAAA,IAAI,EAAE,QAHV;AAIItC,IAAAA,KAAK,EAAE,GAJX;AAKIqC,IAAAA,QAAQ,EAAE;AALd,GAdY,EAqBZ;AACIF,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,UAAU,EAAE,WAFhB;AAGIG,IAAAA,WAAW,EAAE,qDAHjB;AAIIC,IAAAA,QAAQ,EAAE,KAJd;AAKIxC,IAAAA,KAAK,EAAE,GALX;AAMIyC,IAAAA,WAAW,EAAGC,MAAD,IACR,GAAEA,MAAM,CAACC,GAAP,CAAWC,SAAX,IAAwB,EAAG,IAAGF,MAAM,CAACC,GAAP,CAAWE,QAAX,IAAuB,EAAG;AAPnE,GArBY,CAAhB;AAgCA,QAAMC,IAAI,GAAG,CACT;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,MAAnB;AAA2BD,IAAAA,SAAS,EAAE,KAAtC;AAA6CI,IAAAA,GAAG,EAAE;AAAlD,GADS,EAET;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,WAAnB;AAAgCD,IAAAA,SAAS,EAAE,QAA3C;AAAqDI,IAAAA,GAAG,EAAE;AAA1D,GAFS,EAGT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,WAAnB;AAAgCD,IAAAA,SAAS,EAAE,OAA3C;AAAoDI,IAAAA,GAAG,EAAE;AAAzD,GAHS,EAIT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,OAAnB;AAA4BD,IAAAA,SAAS,EAAE,MAAvC;AAA+CI,IAAAA,GAAG,EAAE;AAApD,GAJS,EAKT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,WAAnB;AAAgCD,IAAAA,SAAS,EAAE,UAA3C;AAAuDI,IAAAA,GAAG,EAAE;AAA5D,GALS,EAMT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,YAAnB;AAAiCD,IAAAA,SAAS,EAAE,IAA5C;AAAkDI,IAAAA,GAAG,EAAE;AAAvD,GANS,EAOT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,UAAnB;AAA+BD,IAAAA,SAAS,EAAE,SAA1C;AAAqDI,IAAAA,GAAG,EAAE;AAA1D,GAPS,EAQT;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,SAAnB;AAA8BD,IAAAA,SAAS,EAAE,SAAzC;AAAoDI,IAAAA,GAAG,EAAE;AAAzD,GARS,EAST;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,QAAQ,EAAE,OAAnB;AAA4BD,IAAAA,SAAS,EAAE,QAAvC;AAAiDI,IAAAA,GAAG,EAAE;AAAtD,GATS,CAAb;AAWA,sBACI,uDACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAE;AAAErC,MAAAA,SAAS,EAAEA,SAAb;AAAwBE,MAAAA,SAAS,EAAEA,SAAnC;AAA8CoC,MAAAA,MAAM,EAAElC;AAAtD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEV,MAAd;AAAsB,IAAA,QAAQ,EAAE0B,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE;AAAEmB,MAAAA,QAAQ,EAAE;AAAZ,KAAV;AAA2B,IAAA,SAAS,MAApC;AAAqC,IAAA,OAAO,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAE;AAAEvC,MAAAA,SAAS,EAAEA,SAAb;AAAwBE,MAAAA,SAAS,EAAEA,SAAnC;AAA8CoC,MAAAA,MAAM,EAAElC;AAAtD,KAAb;AAA4E,IAAA,OAAO,EAAEN,aAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEQ,OAAO,CAAClB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYI,QAAQ,CAACI,WAAD,CAAR,CAAsBqB,YAAtB,GAAqCzB,QAAQ,CAACI,WAAD,CAAR,CAAsB4C,QAAvE,CAFJ,CADJ,eAKI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CALJ,eASI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CATJ,CADJ,CADJ,CADJ,CAJJ,CADJ,CAHJ,CADJ,CAmCI;AACA;AACA;AACA;AACA;AACA;AACA;AAzCJ;AA6CH,CAtID;;AAwIA,eAAelD,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { NativeSelect, FormControl, Container } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { getCovidData } from '../../api';\nimport Accordion from '../Accordion/Accordion'\nimport Select from '../AutoComplete'\nimport { TempleBuddhistOutlined } from '@mui/icons-material';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport Chart from '../Chart/Chart'\nimport Cards from '../Cards/Cards'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    table: {\n        width: 650,\n    },\n});\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [stateMap, setStateMap] = useState({});\n    const [states, setStates] = useState([]);\n    const [selectedSno, setSelectedSno] = useState();\n    const [selectedState, setSelectedState] = useState(\"India\");\n    const [confirmed, setConfirmed] = useState(0);\n    const [recovered, setRecovered] = useState(0);\n    const [death, setDeath] = useState(0);\n    const classes = useStyles();\n\n\n    useEffect(() => {\n        const getStateData = async () => {\n            let data = await getCovidData();\n            let tempMap = {}\n            let tempStates = [{ label: \"India\", sno: \"37\" }]\n            data.forEach(state => {\n                if (!tempMap[state.sno]) {\n                    tempMap[state.sno] = state\n                    if (!state.state_name) {\n                        state.state_name = \"India\"\n                    }\n                    if (state.state_name)\n                        tempStates.push({ label: state.state_name, sno: state.sno })\n                }\n            })\n            setStateMap(tempMap);\n            setStates(tempStates);\n        }\n        getStateData();\n    }, [])\n\n    useEffect(() => {\n        if (selectedSno) {\n            setConfirmed(stateMap[selectedSno].new_positive)\n            setRecovered(stateMap[selectedSno].new_cured)\n            setDeath(stateMap[selectedSno].new_death)\n            setSelectedState(stateMap[selectedSno].state_name)\n        }\n    }, [selectedSno])\n\n\n    const handleChange = (event, value) => {\n        setSelectedSno(value.sno)\n    }\n\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 90 },\n        {\n            field: 'firstName',\n            headerName: 'First name',\n            width: 150,\n            editable: true,\n        },\n        {\n            field: 'lastName',\n            headerName: 'Last name',\n            width: 150,\n            editable: true,\n        },\n        {\n            field: 'age',\n            headerName: 'Age',\n            type: 'number',\n            width: 110,\n            editable: true,\n        },\n        {\n            field: 'fullName',\n            headerName: 'Full name',\n            description: 'This column has a value getter and is not sortable.',\n            sortable: false,\n            width: 160,\n            valueGetter: (params) =>\n                `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n        },\n    ];\n\n    const rows = [\n        { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n        { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n        { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n        { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n        { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n        { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n        { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n        { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n        { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    ];\n    return (\n        <>\n            <Cards data={{ confirmed: confirmed, recovered: recovered, deaths: death }} />\n            <Select data={states} onChange={handleChange} />\n            <Container>\n                <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n                    <Grid item xs={6}>\n                        <Chart data={{ confirmed: confirmed, recovered: recovered, deaths: death }} country={selectedState} />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div className=\"App\">\n                            <div className='table-container'>\n                                <Table className={classes.table} >\n                                    <TableRow className='row-style'>\n                                        <TableCell variant=\"head\">Active Cases since yesterday</TableCell>\n                                        <TableCell>{stateMap[selectedSno].new_positive - stateMap[selectedSno].positive}</TableCell>\n                                    </TableRow>\n                                    <TableRow className='row-style'>\n                                        <TableCell variant=\"head\">Cured since yesterday</TableCell>\n                                        <TableCell>Cell 1</TableCell>\n                                    </TableRow>\n                                    <TableRow className='row-style'>\n                                        <TableCell variant=\"head\">Deaths since yesterday</TableCell>\n                                        <TableCell>Cell 1</TableCell>\n                                    </TableRow>\n                                </Table>\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </Container>\n\n            {/* {stateMap} */}\n\n        </>\n        // <FormControl className={styles.formControl}>\n        //     <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        //         <option value=\"\">Global</option>\n        //         {stateData.map((state, id) => <option value={state.state_bane} key={id}>{state.state_name}</option>)}\n        //     </NativeSelect>\n        // </FormControl>\n        // <Accordion data={stateData} />\n    )\n\n\n}\n\nexport default CountryPicker;\n"]},"metadata":{},"sourceType":"module"}